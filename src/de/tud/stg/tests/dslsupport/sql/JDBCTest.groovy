///////////////////////////////////////////////////////////////////////////////
// Copyright 2008-2015, Technische Universitaet Darmstadt (TUD), Germany
//
// The TUD licenses this file to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
///////////////////////////////////////////////////////////////////////////////
package de.tud.stg.tests.dslsupport.sql;

import de.tud.stg.tests.dslsupport.sql.testconnections.TestJDBCConnection;
import java.sql.SQLException;
import java.sql.SQLSyntaxErrorException;
import java.util.LinkedList;
import de.tud.stg.popart.dslsupport.sql.model.*;
import de.tud.stg.popart.dslsupport.sql.*;
import de.tud.stg.tests.dslsupport.sql.beanExample.* ;
import org.codehaus.groovy.control.CompilationUnit.PrimaryClassNodeOperation;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 * This is a super class for several tests, which work with
 * a real SQL database. This class holds the testdata and
 * dumps it in the database before the tests are executed.
 */
public class JDBCTest {

	ISQLConnection testdb;
	
	@org.junit.Before
	public void databaseSetup() {
		testdb = new TestJDBCConnection() ;
		//setup derby database
		try{
			testdb.execute(carsCleanup);
		}catch(SQLSyntaxErrorException e){
			//ignore it. There is no cars table, hence it needn't be dropped.
		}
		try{
			testdb.execute(personsCleanup);
		}catch(SQLSyntaxErrorException e){
			//ignore it. There is no persons table, hence it needn't be dropped.
		}
		try{
			testdb.execute(cityZipCleanup);
		}catch(SQLSyntaxErrorException e){
			//ignore it. There is no cityzip table, hence it needn't be dropped.
		}
		testdb.execute(personsCreate);
		testdb.execute(personsInit);
		testdb.execute(cityZipCreate);
		testdb.execute(cityZipInit);
		testdb.execute(carsCreate);
		testdb.execute(carsInit);
	}
	
	String personsCleanup = "DROP TABLE persons" ;
	String personsCreate = """
CREATE TABLE persons (
  id INTEGER PRIMARY KEY  GENERATED BY DEFAULT AS IDENTITY ,
  lastname varchar(255) default NULL,
  forename varchar(255) default NULL,
  age int default NULL,
  street varchar(255) default NULL,
  zip varchar(10) default NULL,
  city varchar(100) default NULL)""";
	String personsInit = """
INSERT INTO persons (lastname,forename,age,street,zip,city) VALUES ('Watts','Neve',70,'Ap #990-7809 Urna. Avenue','32015','Sterling Heights'),
('Price','Aquila',29,'P.O. Box 709, 5022 Ante St.','49448','Sheffield'),
('Austin','Zoe',47,'Ap #642-8259 Nulla. Avenue','76538','Hilversum'),
('Robertson','Melanie',42,'5780 Mus. Ave','42359','Tain'),
('Guerrero','Aline',47,'935-7011 Dui Avenue','78585','St. Asaph'),
('Berger','Axel',28,'6126 Nec Avenue','01100','Dunbar'),
('Cash','Raja',52,'P.O. Box 123, 712 Magna. Street','71634','Holyhead'),
('Nieves','Blaze',41,'Ap #866-6292 Elit, Street','68275','Jersey City'),
('May','Wanda',41,'P.O. Box 350, 3519 Etiam St.','77751','Gaithersburg'),
('Cannon','Quail',54,'Ap #759-2741 Ultricies St.','03238','Gateshead'),
('Gross','Shelby',75,'Ap #749-5463 Faucibus. Rd.','15398','Leominster'),
('Odonnell','Nelle',47,'P.O. Box 404, 3261 Dui, Ave','60109','Machelen'),
('Britt','Colette',49,'Ap #337-3879 Nec Road','01890','Lockerbie'),
('Nolan','Melodie',65,'2173 Eget Road','10062','Bismarck'),
('Clarke','Jeanette',71,'412-8773 Nunc St.','53593','Kelso'),
('Kelly','Phelan',40,'8269 Lobortis St.','49652','Wick'),
('Lee','Bethany',24,'9724 Arcu Avenue','55496','Fort William'),
('Mann','Shad',53,'Ap #224-3369 Nibh St.','95846','Vancouver'),
('West','Maia',57,'6121 Molestie St.','68089','Hattiesburg'),
('Skinner','Noble',51,'Ap #854-1108 Commodo Av.','94380','Menai Bridge'),
('Lester','Aphrodite',26,'403-6361 Sed St.','82285','Stekene'),
('Woods','Ciara',73,'P.O. Box 660, 7302 Et, Road','76715','Milton Keynes'),
('Chan','Alfreda',73,'664-5974 Scelerisque Ave','34333','Lancaster'),
('Blanchard','Gloria',79,'850-5147 Aenean St.','57191','Balfour'),
('Boyd','Elijah',67,'P.O. Box 342, 4752 Auctor Avenue','65894','Roswell'),
('Sparks','Cairo',35,'2383 Tincidunt Ave','96935','Kincardine'),
('Parker','Cally',26,'847 Libero Rd.','65983','Hexham'),
('Hicks','Whoopi',21,'6684 Eu Road','65749','Weyburn'),
('Porter','Caleb',36,'Ap #556-984 Massa. Av.','98977','Stamford'),
('Albert','Nolan',21,'306-3663 Donec Av.','33858','Venlo'),
('Burt','Lacota',55,'P.O. Box 149, 1071 Donec St.','11825','Haverfordwest'),
('Grant','Kelly',78,'797-1125 Dictum Street','82578','Sromness'),
('Merritt','Pamela',69,'P.O. Box 901, 4154 Nisi Avenue','10618','Waterbury'),
('Barber','Ila',22,'6428 Amet Rd.','90751','Deventer'),
('Stevens','Hashim',27,'P.O. Box 276, 9943 Tristique Rd.','43988','Roswell'),
('Price','Octavius',63,'680-3640 Egestas. Avenue','49141','Dolgellau'),
('Anthony','Inga',74,'1461 Massa. Street','64969','Gretna'),
('Campbell','Megan',45,'464-5316 Aliquam Rd.','66578','Greensboro'),
('Pittman','Emily',80,'P.O. Box 436, 5794 Magna. Av.','34519','Cambridge'),
('Frank','Rinah',72,'P.O. Box 714, 4885 Nec Street','70147','Llandovery'),
('Middleton','Velma',63,'6596 Nec Street','94618','Helmond'),
('Hoover','Germaine',71,'P.O. Box 876, 2822 Mauris Av.','55944','Devizes'),
('Strong','Jeanette',37,'P.O. Box 410, 6849 Mattis Rd.','78428','Pangnirtung'),
('Snyder','Tobias',56,'204-7558 Praesent Road','30708','Culemborg'),
('Figueroa','Zenaida',71,'P.O. Box 107, 2049 Odio Rd.','53933','Perth'),
('Hopkins','Buckminster',78,'Ap #579-2857 Arcu Av.','53226','Newtown'),
('Watson','Michelle',60,'P.O. Box 373, 4466 Sem, Rd.','10444','Devonport'),
('Abbott','Elliott',55,'952-3494 Semper St.','99326','Whithorn'),
('Walters','Athena',37,'754-4428 Mauris Avenue','34483','Johnstone'),
('Rojas','Ciara',55,'P.O. Box 892, 8470 Donec Avenue','31036','Hillsboro')
""";

	String cityZipCleanup = "DROP TABLE cityzip"
	String cityZipCreate = """CREATE TABLE cityzip (
city varchar(50) default NULL,
zip varchar(10) default NULL,
PRIMARY KEY (zip)) """
	String cityZipInit = """
INSERT INTO cityzip (zip,city) VALUES ('32015','Sterling Heights'),
('49448','Sheffield'),
('76538','Hilversum'),
('42359','Tain'),
('78585','St. Asaph'),
('01100','Dunbar'),
('71634','Holyhead'),
('68275','Jersey City'),
('77751','Gaithersburg'),
('03238','Gateshead')""";
	String carsCleanup = "DROP TABLE cars"
	String carsCreate ="""
CREATE TABLE cars (
  id INTEGER PRIMARY KEY  GENERATED BY DEFAULT AS IDENTITY,
  driverid INTEGER default NULL,
  producer varchar(255) default NULL,
  modell varchar(255) default NULL,
  buildyear INTEGER default NULL,
  km INTEGER default NULL,
  FOREIGN KEY(driverid) REFERENCES persons(id))""";
	String carsInit = """
INSERT INTO cars (driverid,producer,modell,buildyear,km) VALUES (38,'VW','Golf',2009,39743),
(15,'VW','Polo',2001,64972),
(5,'Mercedes','C-Class',1990,70631),
(13,'VW','Passat',2005,13803),
(21,'Ford','Mondeo',1997,79283),
(42,'VW','Passat',2004,132700),
(36,'Mercedes','S-Class',1999,123581),
(2,'Mercedes','C-Class',2009,146214),
(25,'VW','Golf',1997,116260),
(6,'Mercedes','E-Class',1993,94901),
(18,'VW','Polo',1992,28547),
(30,'Ford','Ka',1990,29047),
(34,'VW','Passat',2001,83452),
(18,'VW','Golf',2003,146319),
(40,'VW','Passat',1992,75771),
(3,'Mercedes','E-Class',2010,79365),
(11,'VW','Passat',1999,23310),
(8,'VW','Golf',1999,109674),
(43,'Ford','Kuga',2006,41660),
(25,'Ford','Fiesta',1990,24371),
(17,'VW','Polo',2007,33809),
(10,'Ford','Galaxy',1994,113745),
(4,'Ford','Fiesta',1998,93700),
(12,'VW','Golf',2006,59417),
(43,'Ford','Focus',2001,99642),
(27,'Ford','Focus',2001,130439),
(11,'Ford','Mondeo',1995,14385),
(29,'Mercedes','C-Class',1999,20958),
(9,'Ford','Focus',1991,70232),
(12,'Ford','Focus',1999,84812),
(23,'VW','Golf',1995,70459),
(6,'Ford','Mondeo',2005,119282),
(3,'Ford','Kuga',2005,10416),
(31,'VW','Passat',2000,60329),
(46,'Ford','Mondeo',1996,65094),
(23,'Mercedes','S-Class',2007,55307)""" 	

}
